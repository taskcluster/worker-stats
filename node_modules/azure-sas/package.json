{
  "name": "azure-sas",
  "version": "0.0.1",
  "description": "Azure Shared Access Signature generation.",
  "main": "sas.js",
  "scripts": {
    "test": "make test"
  },
  "author": {
    "name": "James Lal [:lightsofapollo]"
  },
  "license": "MIT",
  "dependencies": {},
  "keywords": [
    "azure",
    "sign",
    "azure table",
    "table",
    "shared access signature"
  ],
  "devDependencies": {
    "azure": "~0.8.1",
    "mocha": "~1.17.1",
    "promise": "~4.0.0",
    "superagent": "~0.16.0",
    "superagent-promise": "0.0.0"
  },
  "readme": "# azure-sas\n\nAzure Shared Access Signature Signing (for node.js).\n\nThe goal is to provide a way to grant access keys to your azure resources\n(like querying a table from the browser) with a very small footprint.\n\n## Usage\n\nThe [tests](/sas_test.js) are written in an end-to-end style see them\nfor actual usage (making calls to azure)\n\n```js\nvar sas = require('azure-sas');\n\nvar expires = new Date();\n// good for an hour\nexpires.setHours(expires.getHours() + 1);\n\n// sign a table resource\nvar queryParams = sas.table({\n  // this must be lowercase even if your table is uppercase, etc...\n  resource: 'tablename',\n\n  // allow reads\n  signedpermissions: 'r',\n\n  signedexpiry: expires\n});\n\n// query params is suitable for use in any table query that is supported\n// via reads\n\n// a quick example using superagent\n\nvar superagent = require('superagent');\n\nsuperagent.get('https://mytable.table.core.windows.net/mytable()').\n  query('$filter', '(PartitionKey eq \"mypartition\")').\n  // turn on json mode\n  set('Accept', 'application/json');\n  end(function(err, result) {\n    var json = result.res.body;\n  });\n```\n",
  "readmeFilename": "README.md",
  "_id": "azure-sas@0.0.1",
  "_from": "azure-sas@"
}
