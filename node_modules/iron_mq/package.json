{
  "name": "iron_mq",
  "version": "0.2.0",
  "description": "Node client for IronMQ",
  "homepage": "https://github.com/iron-io/iron_mq_node",
  "author": {
    "name": "Andrew Kirilenko, Yury Yantsevich & Iron.io, Inc"
  },
  "main": "./lib/client",
  "dependencies": {
    "pkginfo": "0.2.3",
    "underscore": "1.3.3",
    "iron_core": "0.2"
  },
  "devDependencies": {
    "coffee-script": "1.6.2"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/iron-io/iron_mq_node.git"
  },
  "engines": {
    "node": ">= 0.6.0"
  },
  "readme": "IronMQ Node.js Client\n-------------\n\nThe [full API documentation is here](http://dev.iron.io/mq/reference/api/) and this client tries to stick to the API as\nmuch as possible so if you see an option in the API docs, you can use it in the methods below.\n\n\n## Getting Started\n\n1\\. Install the gem:\n\n```\nnpm install iron_mq\n```\n\n2\\. [Setup your Iron.io credentials](http://dev.iron.io/mq/reference/configuration/)\n\n3\\. Create an IronMQ Client object:\n\n```javascript\nvar iron_mq = require('iron_mq');\nvar imq = new iron_mq.Client();\n```\n\nOr pass in credentials:\n\n```javascript\nvar imq = new iron_mq.Client({token: \"MY_TOKEN\", project_id: \"MY_PROJECT_ID\"});\n```\n\n\n## Usage\n\n### Get Queues List\n\n```javascript\nimq.queues(options, callback(error, body) {});\n```\n\n**Options:**\n\n* `page`: The 0-based page to view. The default is 0.\n* `per_page`: The number of queues to return per page. The default is 30, the maximum is 100.\n\n--\n\n### Get a Queue Object\n\nYou can have as many queues as you want, each with their own unique set of messages.\n\n```javascript\nvar queue = imq.queue(\"my_queue\");\n```\n\n**Note:** if queue with desired name does not exist it returns fake queue.\nQueue will be created automatically on post of first message or queue configuration update.\n\n--\n\n### Retrieve Queue Information\n\n```javascript\nqueue.info(callback(error, body) {});\n```\n\n--\n\n### Post a Message on a Queue\n\nMessages are placed on the queue in a FIFO arrangement.\nIf a queue does not exist, it will be created upon the first posting of a message.\n\n```javascript\nqueue.post(messages, callback(error, body) {});\n\n// single message\nqueue.post(\"hello IronMQ!\", callback(error, body) {});\n// with options\nqueue.post({body: \"hello IronMQ\", delay: 30}, callback(error, body) {});\n// or multiple messages\nqueue.post([\"hello\", \"IronMQ\"], callback(error, body) {});\n// messages with options\nqueue.post(\n  [{body: \"hello\", timeout: 40},\n   {body: \"IronMQ\", timeout: 80}],\n  callback(error, body) {}\n);\n```\n\n**Optional messages' parameters:**\n\n* `timeout`: After timeout (in seconds), item will be placed back onto queue.\nYou must delete the message from the queue to ensure it does not go back onto the queue.\n Default is 60 seconds. Minimum is 30 seconds. Maximum is 86,400 seconds (24 hours).\n\n* `delay`: The item will not be available on the queue until this many seconds have passed.\nDefault is 0 seconds. Maximum is 604,800 seconds (7 days).\n\n* `expires_in`: How long in seconds to keep the item on the queue before it is deleted.\nDefault is 604,800 seconds (7 days). Maximum is 2,592,000 seconds (30 days).\n\n--\n\n### Get a Messages off a Queue\n\n```javascript\nqueue.get(options, callback(error, body) {});\n```\n\n**Options:**\n\n* `n`: The maximum number of messages to get. Default is 1. Maximum is 100.\n\n* `timeout`: After timeout (in seconds), item will be placed back onto queue.\nYou must delete the message from the queue to ensure it does not go back onto the queue.\nIf not set, value from POST is used. Default is 60 seconds. Minimum is 30 seconds.\nMaximum is 86,400 seconds (24 hours).\n\nWhen `n` parameter is specified and greater than 1 method returns list of messages.\nOtherwise, message's object will be returned.\n\nWhen you pop/get a message from the queue, it is no longer on the queue but it still exists within the system.\nYou have to explicitly delete the message or else it will go back onto the queue after the `timeout`.\n\n--\n\n### Touch a Message on a Queue\n\nTouching a reserved message extends its timeout by the duration specified when the message was created, which is 60 seconds by default.\n\n```javascript\nqueue.touch(message_id, callback(error, body) {});\n```\n\n--\n\n### Release Message\n\n```javascript\nqueue.release(message_id, options, callback(error, body) {});\n```\n\n**Options:**\n\n* `delay`: The item will not be available on the queue until this many seconds have passed.\nDefault is 0 seconds. Maximum is 604,800 seconds (7 days).\n\n--\n\n### Delete a Message from a Queue\n\n```javascript\nqueue.delete(message_id, callback(error, body) {});\n```\n\nBe sure to delete a message from the queue when you're done with it.\n\n--\n\n### Clear a Queue\n\n```javascript\nqueue.clear(callback(error, body) {});\n```\n\n--\n\n### Delete a Message Queue\n\n```javascript\nqueue.del_queue(callback(error, body) {});\n```\n\n--\n\n## Push Queues\n\nIronMQ push queues allow you to setup a queue that will push to an endpoint, rather than having to poll the endpoint. \n[Here's the announcement for an overview](http://blog.iron.io/2013/01/ironmq-push-queues-reliable-message.html). \n\n### Update a Message Queue\n\n```javascript\nqueue.update(options, callback(error, body) {});\n```\n\n**The following options are all related to Push Queues:**\n\n* `subscribers`: An array of subscriber hashes containing a “url” field.\nThis set of subscribers will replace the existing subscribers.\nTo add or remove subscribers, see the add subscribers endpoint or the remove subscribers endpoint.\nSee below for example json.\n* `push_type`: Either `multicast` to push to all subscribers or `unicast` to push to one and only one subscriber.\nDefault is `multicast`.\n* `retries`: How many times to retry on failure. Default is 3. Maximum is 100.\n* `retries_delay`: Delay between each retry in seconds. Default is 60.\n\n**Example:**\n\n```javascript\nqueue.update(\n  {push_type: \"multicast\",\n   retries: 5,\n   subscribers: [\n     {url: \"http://my.first.end.point/push\"},\n     {url: \"http://my.second.end.point/push\"}\n   ]},\n  callback(error, body) {}\n);\n```\n\n--\n\n### Add/Remove Subscribers on a Queue\n\n```javascript\nqueue.add_subscribers({url:  \"http://nowhere.com\"}, callback(error, body) {});\n\nqueue.add_subscribers(\n  [{url: 'http://first.endpoint.xx/process'},\n   {url: 'http://second.endpoint.xx/process'}],\n  callback(error, body) {}\n);\n\n\nqueue.rm_subscribers({url: \"http://nowhere.com\"}, callback(error, body) {});\n\nqueue.rm_subscribers(\n  [{url: 'http://first.endpoint.xx/process'},\n   {url: 'http://second.endpoint.xx/process'}],\n  callback(error, body) {}\n);\n```\n\n--\n\n### Get Message Push Status\n\nAfter pushing a message:\n\n```javascript\nqueue.msg_push_statuses(message_id, callback(error, body) {});\n```\n\n--\n\n### Acknowledge / Delete Message Push Status\n\n```javascript\nqueue.del_msg_push_status(message_id, subscriber_id, callback(error, body) {});\n```\n\n--\n\n### Revert Queue Back to Pull Queue\n\nIf you want to revert you queue just update `push_type` to `\"pull\"`.\n\n```javascript\nqueue.update({push_type: \"pull\"}, callback(error, body) {});\n```\n\n--\n\n## Further Links\n\n* [IronMQ Overview](http://dev.iron.io/mq/)\n* [IronMQ REST/HTTP API](http://dev.iron.io/mq/reference/api/)\n* [Push Queues](http://dev.iron.io/mq/reference/push_queues/)\n* [Other Client Libraries](http://dev.iron.io/mq/libraries/)\n* [Live Chat, Support & Fun](http://get.iron.io/chat)\n\n-------------\n© 2011 - 2013 Iron.io Inc. All Rights Reserved.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/iron-io/iron_mq_node/issues"
  },
  "_id": "iron_mq@0.2.0",
  "_from": "iron_mq@~0.2.0"
}
