{
  "name": "proxied-promise-object",
  "version": "0.1.0",
  "description": "wrap an object's callback methods with promise returning ones",
  "main": "proxy.js",
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/lightsofapollo/proxied-promise-object.git"
  },
  "keywords": [
    "promise",
    "proxy",
    "object",
    "denodeify"
  ],
  "author": {
    "name": "James Lal [:lightsofapollo]"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/lightsofapollo/proxied-promise-object/issues"
  },
  "devDependencies": {
    "promise": "~3.2.0",
    "mocha": "~1.16.2",
    "matcha": "~0.4.1"
  },
  "readme": "# proxied-promise-object\n\nProxy all calls to an objects functions to a wrapper which returns\npromises.\n\nNOTE: This does not use \"real\" proxies (ES6)\n\n## Usage\n\n```js\nvar Proxy = require('proxied-promise-object');\n\n// Proxy(Promise, object); also works\nvar fs = new Proxy(YourFavPromiseLib, require('fs'));\n\nfs.stat('xfoo/...').then(\n  function() {\n  }\n);\n```\n\nProxies are stamped as well to protect wrapping proxies with proxies\n\n```js\nvar fs = new Proxy(YourFavPromiseLib, require('fs'));\nvar fs2 = new Proxy(YourFavPromiseLib, fs);\n\n// fs === fs2\n```\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/lightsofapollo/proxied-promise-object",
  "_id": "proxied-promise-object@0.1.0",
  "_from": "proxied-promise-object@~0.1.0"
}
