{"version":3,"file":"tasks_test.js","sources":["@traceur/generated/TemplateParser/3","static/src/store/tasks_test.js","@traceur/generated/TemplateParser/2","@traceur/generated/TemplateParser/0","@traceur/generated/TemplateParser/1"],"names":[],"mappings":"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","sourcesContent":["define($__placeholder__0, $__placeholder__1);","/* jshint esnext: true */\nimport TasksStore from './tasks';\nimport TaskModel from '../model/task';\nimport config from '../test_config';\nimport {assert} from '../../vendor/chai';\n\nsuite('store tasks', function() {\n  this.timeout('10s');\n\n  var subject;\n  setup(() => {\n    subject = new TasksStore(config.host);\n  });\n\n  test('#createTask', () => {\n    var task = TaskModel.bashTask('ubuntu', 'ls');\n    return subject.createTask(config.queue, task).then((value) => {\n      assert.ok(value.taskUrl);\n    });\n  });\n\n  suite('#refreshTask', function() {\n    var task = TaskModel.bashTask('ubuntu', 'ls');\n    var azureTask;\n    setup(function() {\n      return subject.createTask(config.queue, task).then(\n        (result) => azureTask = result\n      );\n    });\n\n    test('refresh result', function() {\n      return subject.refreshTask(azureTask).then((result) => {\n        assert.equal(result.PartitionKey, azureTask.PartitionKey);\n        assert.equal(result.RowKey, azureTask.RowKey);\n      });\n    });\n  });\n\n  suite('#refreshTaskUntil', function() {\n    var task = TaskModel.bashTask('ubuntu', 'ls');\n    var azureTask;\n    setup(function() {\n      return subject.createTask(config.queue, task).then(\n        (result) => azureTask = result\n      );\n    });\n\n    test('successful refresh', function() {\n      // this should never fail because RowKey is always present\n      return subject.refreshTaskUntil(azureTask, 'RowKey').then((result) => {\n        assert.equal(result.PartitionKey, azureTask.PartitionKey);\n        assert.equal(result.RowKey, azureTask.RowKey);\n      });\n    });\n\n    test('timeout during refresh', function() {\n      return subject.refreshTaskUntil(azureTask, 'xfoo', 1, 10).then(\n        () => { throw new Error('expected timeout got success'); },\n        (err) => {\n          assert.ok(err);\n          assert.include(err.message, 'timeout');\n        }\n      );\n    });\n  });\n\n  suite('#listTasks', function() {\n    var task = TaskModel.bashTask('ubuntu', 'ls');\n    var azureTask;\n    setup(function() {\n      return subject.createTask(config.queue, task).then(\n        (result) => azureTask = result\n      );\n    });\n\n    test('list tasks', function() {\n      return subject.listTasks(1).then((tasks) => {\n        assert.equal(tasks.length, 1);\n        var task = tasks[0];\n\n        assert.equal(task.RowKey, azureTask.RowKey);\n        assert.equal(task.PartitionKey, azureTask.PartitionKey);\n      });\n    });\n  });\n});\n","function($__placeholder__0) {\n      $__placeholder__1\n    }","var __moduleName = $__placeholder__0;","return $__placeholder__0"]}