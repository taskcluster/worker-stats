{"version":3,"file":"log.js","sources":["@traceur/generated/TemplateParser/3","static/src/store/log.js","@traceur/generated/TemplateParser/2","@traceur/generated/TemplateParser/0","@traceur/generated/TemplateParser/6","@traceur/generated/TemplateParser/9","@traceur/generated/TemplateParser/1","@traceur/generated/TemplateParser/7","@traceur/generated/TemplateParser/8"],"names":[],"mappings":"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","sourcesContent":["define($__placeholder__0, $__placeholder__1);","/*jshint esnext:true */\nmodule superagent from '../../vendor/superagent';\n\nvar COMPLETE_HEADER = 'x-ms-meta-complete';\n\nfunction req(method, url) {\n  return superagent(method, url).\n            set('x-ms-version', '2013-08-15');\n}\n\nfunction getReq(logger) {\n  // sadly we need to cache bust because azure won't send over the complete\n  // header if the browser tries to avoid making this request by including\n  // etags.\n  var current = req('GET', `${logger.url}?nocache=${Date.now()}`);\n\n  if (logger.etag) current.set('If-None-Match', logger.etag);\n  if (logger.offset) current.set('Range', 'bytes=' + logger.offset + '-');\n  return current;\n}\n\nfunction headReq(logger) {\n  var current = req('HEAD', logger.url);\n  if (logger.etag) current.set('If-None-Match', logger.etag);\n  return current;\n}\n\nfunction logIsComplete(req) {\n  return req.headers['x-ms-meta-complete'];\n}\n\nexport default class Log {\n  constructor(url, interval=1000) {\n    this.url = url;\n    this.offset = 0;\n    this.complete = false;\n    this.etag = null;\n    this.interval = interval;\n\n    this.aborted = false;\n    this.onerror = function() {};\n    this.ondata = function() {};\n    this.onend = function() {};\n    this._read();\n  }\n\n  _waitForEtagChange() {\n    headReq(this).end((err, res) => {\n      if (res.ok) {\n        // must have made at least one get is complete\n        if (this.etag && logIsComplete(res)) return this._complete();\n        return this._read();\n      }\n\n      // otherwise wait for new content\n      setTimeout(this._waitForEtagChange.bind(this), this.interval);\n    });\n  }\n\n  _complete() {\n    if (!this.complete) {\n      this.complete = true;\n      this.onend();\n    }\n  }\n\n  _read() {\n    var req = getReq(this);\n    var progress;\n\n    req.end((err, res) => {\n      if (err) {\n        this.aborted = true;\n        return this.onerror(err);\n      }\n\n      // if the get request was not okay check for new data after the interval.\n      if (!res.ok) {\n        return setTimeout(\n          this._waitForEtagChange.bind(this),\n          this.interval\n        );\n      }\n\n      this.ondata(res.text);\n      this.etag = res.header.etag;\n\n      if (progress) this.offset += progress.total || 0;\n      if (logIsComplete(res)) this._complete();\n      if (!this.complete) this._waitForEtagChange();\n    });\n\n    // keep track of the last status event to get the binary offset of the log.\n    req.xhr.addEventListener('progress', (status) => {\n      progress = status;\n    });\n  }\n}\n","function($__placeholder__0) {\n      $__placeholder__1\n    }","var __moduleName = $__placeholder__0;","var $__default = $__placeholder__0","function() {\n        var $__placeholder__0 = $__placeholder__1;\n        return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                             $__placeholder__4);\n      }()","return $__placeholder__0","get $__placeholder__0() { return $__placeholder__1; }","__transpiledModule: true"]}