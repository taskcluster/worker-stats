{"version":3,"file":"tasks.js","sources":["@traceur/generated/TemplateParser/3","static/src/store/tasks.js","@traceur/generated/TemplateParser/2","@traceur/generated/TemplateParser/0","@traceur/generated/TemplateParser/4","@traceur/generated/TemplateParser/7","@traceur/generated/TemplateParser/1","@traceur/generated/TemplateParser/5","@traceur/generated/TemplateParser/6"],"names":[],"mappings":"AAAA,MAAM,ECOiB,0BAAA,CACA,0BAAA,CAAA,CCRvB,SAAA;;ACAI,KAAA,aAAA;AFEA,KAAA,KAAA,EAAO;AACT,aAAA,CAAW,SAAA;AACX,cAAA,CAAY;AAAA,GAAA;;;AGJV,KAAA,WAAA,ICAJ,QAAA,CAAS;AACG,oBJSG,SAAM,WAAA,CACP,IAAA,CAAM;AAEhB,UAAA,CAAA,IAAA,EAAY,OAAA,CAAA,MAAa,CAAC,CAAA,CAAA,CAAI,KAAA,CAAA;AAC9B,UAAA,CAAA,IAAA,EAAY,KAAA;AACZ,UAAA,CAAA,KAAA,EAAa,IAAI,WAAU,CAAC,CAC1B,OAAA,CAAS,KAAA,CAAA,IAAS,CAAC,IAAA,CAAA,SAAA,CAAA,CAAA,CAAA;AAAA,KAAA;AIdjB,UAAO,EAAC,eAAA,CAAA,WAAA,CAA4B;AJmB1C,UAAA,CAAA,SAAA,CAAK,IAAA,CAAM;AACT,cAAO,KAAA,CAAA,IAAA,EAAY,KAAA;AAAA,OAAA;AASrB,gBAAA,CAAA,SAAA,CAAW,IAAA;;AACT,cAAO,IAAI,QAAO,WAAE,MAAA,CAAQ,OAAA;AACtB,aAAA,IAAA,YAAe;AACf,aAAA,IAAA,EAAM,WAAA,CAAA,IAAe,CAAC,GAAA,CAAA,CAAA,IAAS,CAAC,IAAA,CAAA;AACpC,aAAA,CAAA,GAAO,WAAE,GAAA,CAAK,SAAA,CAAa;AACzB,cAAA,EAAI,CAAC,QAAA,CAAA,EAAA,CAAa;AACZ,iBAAA,IAAA,EAAM,IAAI,MAAK,CAAC,uBAAA,CAAA;AACpB,iBAAA,CAAA,QAAA,EAAe,SAAA;AACf,oBAAM,CAAC,GAAA,CAAA;AACP,oBAAA;AAAA;AAEF,kBAAM,CAAC,QAAA,CAAA,IAAA,CAAA;AAAA,WAAA,CAAA,CAAA;AAAA,SAAA,CAAA,CAAA;AAAA,OAAA;AAKb,iBAAA,CAAA,SAAA,CAAY,IAAA;AACV,cAAO,KAAA,CAAA,KAAA,CAAA,UAAqB,CAAC;AAC3B,gBAAA,CAAQ,EAAA;AACR,mBAAA,CAAW,qBAAA,EAAuB,KAAA,CAAA,YAAA,EAAoB,UAAA,EAC3C,eAAA,EAAiB,KAAA,CAAA,MAAA,EAAc;AAAA,SAAA,CAAA,CAAA,IAErC,WAAE,MAAA,CAAW;AAClB,gBAAO,OAAA,CAAO,CAAA,CAAA;AAAA,SAAA,CAAA,CAAA;AAAA,OAAA;AAIlB,sBAAA,CAAA,SAAA,CAAiB,IAAA,CAAM,MAAA;WAAO,SAAA,4CAAS,KAAA;WAAM,QAAA,4CAAQ,MAAA;;AACnD,eAAA,EAAU,KAAA,CAAA,GAAQ,CAAA,CAAA,EAAK,QAAA;AAEvB,cAAO,IAAI,QAAO,WAAE,MAAA,CAAQ,OAAA;AACtB,aAAA,QAAA;AACF,cAAA,EAAI,IAAA,CAAA,GAAQ,CAAA,CAAA,EAAK,QAAA,CAAS;AACxB,oBAAO,OAAM,CAAC,GAAI,MAAK,CAAC,wBAAA,CAAA,CAAA;AAAA;4BAGV,CAAC,IAAA,CAAA,CAAA,IAAU,WAAE,IAAA,CAAS;AACpC,gBAAA,EAAI,IAAA,CAAK,KAAA,CAAA,CAAQ,OAAO,OAAM,CAAC,IAAA,CAAA;AAC/B,wBAAU,CAAC,OAAA,CAAS,SAAA,CAAA;AAAA,aAAA,CAAA,CAAA,CAAA,MACd,EAAC,MAAA,CAAA;AAAA,WAAA,CAAA;AAGX,iBAAO,CAAA,CAAA;AAAA,SAAA,CAAA,CAAA;AAAA,OAAA;AAIX,eAAA,CAAA,SAAA,CAAU,CAAU;WAAV,MAAA,4CAAM,GAAA;AACd,cAAO,KAAA,CAAA,KAAA,CAAA,UAAqB,CAAC,CAC3B,MAAA,CAAQ,MAAA,CAAA,CAAA;AAAA;AAAA,KAAA;GI3EP,CAAA,CAAA,CAAA;ACJP;ACAA,iBAAwB;AAAE;;ACA1B,sBAAA,CAAoB;AAAA,GAAA;AAAA,CAAA,CAAA","sourcesContent":["define($__placeholder__0, $__placeholder__1);","/*jshint esnext: true */\n\nvar URLS = {\n  azureAuth: '/azure',\n  createTask: '/task/aws-docker'\n};\n\nmodule AzureTable from '../../vendor/azure_table';\nmodule superagent from '../../vendor/superagent';\n\nexport default class TasksStore {\n  constructor(host) {\n    // overridable urls for task store.\n    this.urls = Object.assign({}, URLS);\n    this.host = host;\n    this.azure = new AzureTable({\n      signUrl: this.path(URLS.azureAuth)\n    });\n  }\n\n  // return a path on the server\n  path(path) {\n    return this.host + path;\n  }\n\n  /**\n  POST a task to the server.\n\n  @param {Object} task to submit to the server.\n  @return Promise\n  */\n  createTask(task) {\n    return new Promise((accept, reject) => {\n      var url = this.path(this.urls.createTask);\n      var req = superagent.post(url).send(task);\n      req.end((err, response) => {\n        if (!response.ok) {\n          var err = new Error('could not create task');\n          err.response = response;\n          reject(err);\n          return;\n        }\n        accept(response.body);\n      });\n    });\n  }\n\n  refreshTask(task) {\n    return this.azure.buildQuery({\n      '$top': 1,\n      '$filter': \"(PartitionKey eq '\" + task.PartitionKey + \"') and \" +\n                 \"(RowKey eq '\" + task.RowKey + \"')\"\n\n    }).then((values) => {\n      return values[0];\n    });\n  }\n\n  refreshTaskUntil(task, field, interval=1000, timeout=30000) {\n    timeout = Date.now() + timeout;\n\n    return new Promise((accept, reject) => {\n      var refresh = () => {\n        if (Date.now() > timeout) {\n          return reject(new Error('timeout during refresh'));\n        }\n\n        this.refreshTask(task).then((task) => {\n          if (task[field]) return accept(task);\n          setTimeout(refresh, interval);\n        }).catch(reject);\n      };\n\n      refresh();\n    });\n  }\n\n  listTasks(limit=20) {\n    return this.azure.buildQuery({\n      '$top': limit,\n    });\n  }\n}\n","function($__placeholder__0) {\n      $__placeholder__1\n    }","var __moduleName = $__placeholder__0;","var $__default = $__placeholder__0","function() {\n        var $__placeholder__0 = $__placeholder__1;\n        return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                             $__placeholder__4);\n      }()","return $__placeholder__0","get $__placeholder__0() { return $__placeholder__1; }","__transpiledModule: true"]}