{"version":3,"file":"list.js","sources":["@traceur/generated/TemplateParser/3","@traceur/generated/TemplateParser/2","@traceur/generated/TemplateParser/0","static/src/view/list.js","@traceur/generated/TemplateParser/4","@traceur/generated/TemplateParser/7","@traceur/generated/TemplateParser/1","@traceur/generated/TemplateParser/5","@traceur/generated/TemplateParser/6"],"names":[],"mappings":"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","sourcesContent":["define($__placeholder__0, $__placeholder__1);","function($__placeholder__0) {\n      $__placeholder__1\n    }","var __moduleName = $__placeholder__0;","/* jshint esnext: true */\n\n\n/**\nThe logic is mostly taken form http://robert.ocallahan.org/2014/02/implementing-virtual-widgets-on-web.html\n*/\n\nvar Selectors = {\n  content: '.content',\n  template: 'template'\n};\n\nexport default class ListView {\n\n  constructor(listElement) {\n    // reset internal state\n    this.resetState();\n\n    // must be scrollable or really bad things happen\n    this.listElement = listElement;\n    this.contentElement = listElement.querySelector(Selectors.content);\n\n    var template = listElement.querySelector(Selectors.template);\n    template.parentNode.removeChild(template);\n\n    // cache the height of the list element\n    this._getScrollPortHeight =\n      this.listElement.getBoundingClientRect().height;\n\n    // get the template item\n    this.itemTemplate = template.content.firstElementChild;\n\n    // update as we scroll through the list\n    listElement.addEventListener('scroll', this.update.bind(this));\n\n  }\n\n  populateItem() {\n    throw new Error('implement populate item');\n  }\n\n  resetState() {\n    if (this.contentElement) {\n      this.contentElement.innerHTML = '';\n    }\n    this.itemsInDOM = [];\n  }\n\n  setList(list) {\n    this.resetState();\n    this.list = list;\n\n    // figure out the first items height\n    var itemNode = this.itemTemplate.cloneNode(true);\n    this.contentElement.appendChild(itemNode);\n    this.populateItem(itemNode, list[0]);\n    this.itemsInDOM[0] = itemNode;\n    this.itemHeight = itemNode.getBoundingClientRect().height;\n\n    var height = `${this.itemHeight * list.length}px`;\n    this.contentElement.style.height = height;\n  }\n\n  getScrollPos() {\n    return this.listElement.scrollTop;\n  }\n\n  getScrollPortHeight() {\n    return this._getScrollPortHeight;\n  }\n\n  renderArea(displayPortMarginMultiplier) {\n    var scrollPos = this.getScrollPos();\n    var scrollPortHeight = this.getScrollPortHeight();\n    var itemsInDOM = this.itemsInDOM;\n    var itemHeight = this.itemHeight;\n    var numberOfItems = this.list.length;\n    var template = this.itemTemplate;\n\n    // Determine which items we *need* to have in the DOM. displayPortMargin\n    // is somewhat arbitrary. If there is fast async scrolling, increase\n    // displayPortMarginMultiplier to make sure more items can be prerendered. If\n    // populateItem triggers slow async activity (e.g. image loading or\n    // database queries to fill in an item), increase displayPortMarginMultiplier\n    // to reduce the likelihood of the user seeing incomplete items.\n    var displayPortMargin = displayPortMarginMultiplier * scrollPortHeight;\n    var startDiff =\n      Math.floor((scrollPos - displayPortMargin) / itemHeight);\n    var startIndex = Math.max(0, startDiff);\n\n    var endDiff = Math.ceil(\n      (scrollPos + scrollPortHeight + displayPortMargin) / itemHeight\n    );\n    var endIndex = Math.min(numberOfItems, endDiff);\n\n    // indices of items which are eligible for recycling\n    var recyclableItems = [];\n    for (var i in itemsInDOM) {\n      if (i < startIndex || i >= endIndex) {\n        recyclableItems.push(i);\n      }\n    }\n    // Put the items that are furthest away from the displayport at the end of\n    // the array.\n    function distanceFromDisplayPort(i) {\n      return i < startIndex ? startIndex - 1 - i : i - endIndex;\n    }\n    recyclableItems.sort(function (a,b) {\n      return distanceFromDisplayPort(a) - distanceFromDisplayPort(b);\n    });\n\n    for (var i = startIndex; i < endIndex; ++i) {\n      if (itemsInDOM[i]) {\n        continue;\n      }\n      var item;\n      if (recyclableItems.length > 0) {\n        var recycleIndex = recyclableItems.pop();\n        item = itemsInDOM[recycleIndex];\n        delete itemsInDOM[recycleIndex];\n      } else {\n        item = template.cloneNode(true);\n        this.contentElement.appendChild(item);\n      }\n\n      this.populateItem(item, this.list[i]);\n      item.style.top = `${i * itemHeight}px`;\n      itemsInDOM[i] = item;\n    }\n  }\n\n  update() {\n    // Synchronously generate all the items that are immediately or nearly visible\n    this.renderArea(1);\n    // Asynchronously generate the other items for the displayport\n    setTimeout(() => this.renderArea(4));\n  }\n}\n","var $__default = $__placeholder__0","function() {\n        var $__placeholder__0 = $__placeholder__1;\n        return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                             $__placeholder__4);\n      }()","return $__placeholder__0","get $__placeholder__0() { return $__placeholder__1; }","__transpiledModule: true"]}